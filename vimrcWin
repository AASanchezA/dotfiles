set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction

"set mapleader to comma key
let mapleader=","

"=================================================================
"=================== Pathogen Packages Manager ===================
"=================================================================
"pathogen.vim
"Manage your 'runtimepath' with ease. In practical terms, pathogen.vim makes
"it super easy to install plugins and runtime files in their own private
"directories
execute pathogen#infect()
filetype plugin indent on     " required!
syntax on

"=================================================================
"=================== Bundle Manager ===================
"=================================================================
" Instruction for vim in windows
" http://www.vim.org/ugrankar.pdf
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

set nocompatible               " be iMproved
filetype off                   " required!

" set the runtime path to include Vundle and initialize
"alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
set rtp+=$USERPROFILE/Vim/vimfiles/bundle/Vundle.vim/
let path='$USERPROFILE/Vim/vimfiles/bundle'
call vundle#begin(path)

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" My Bundles here:
"original repos on github
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'flazz/vim-colorschemes'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'zeis/vim-kolor'
Plugin 'pangloss/vim-javascript'
Plugin 'klen/python-mode'
Plugin 'scrooloose/syntastic' 
Plugin 'Lokaltog/vim-easymotion'
Plugin 'joequery/Stupid-EasyMotion'
Plugin 'vim-scripts/L9'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'tpope/vim-unimpaired'
Plugin 'terryma/vim-multiple-cursors'
"Plugin 'nathanaelkane/vim-indent-guides.git'
"Plugin 'Chiel92/vim-autoformat'
"Plugin 'vim-scripts/Command-T.git'
"Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'Valloric/YouCompleteMe.git'
"Plugin 'godlygeek/tabular.git'
"Plugin 'LaTeX-Box-Team/LaTeX-Box.git'
"Plugin 'nelstrom/vim-markdown-folding.git'
"Plugin 'tclem/vim-arduino.git'
"Plugin 'einars/js-beautify'

" Snipmate bundle
"Plugin 'msanders/snipmate.vim'
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'garbas/vim-snipmate'
Plugin 'SirVer/ultisnips'
"Optional:
Plugin 'honza/vim-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on


"=================================================================
"=================== Make Vim Nice ==============================
"=================================================================
"Set the status line options. Make it show more information.
set laststatus=2
"set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
"Set Color Scheme and Font Option

" setting guifont
if has('gui_running')
  colorscheme molokai
  set guifont=Consolas:h10
  set guioptions-=m
  set guioptions-=T
  set guioptions-=L
else
  "something for console Vim
  colorscheme pablo
  set guifont=Consolas:h12
endif

"SetUp color-Scheme
set background=dark
"Add color column as a reference for coding
set colorcolumn=80
highlight ColorColumn ctermbg=233

hi Normal ctermbg=NONE

"GUI setup 
"set toolbar=text,tooltips

"Setting Up line number
autocmd FocusLost   * : set number
autocmd InsertEnter * : set number
autocmd InsertLeave * : set relativenumber
autocmd CursorMoved * : set relativenumber

"=================================================================
"=================== Setting Up Tab size  ========================
"=================================================================
set smartindent
set noexpandtab
set copyindent
set preserveindent
set softtabstop=0
set shiftwidth=4
set tabstop=4

"set line no, buffer, search, highlight, autoindent and more.
set nu
set hidden
set ignorecase
set incsearch
set smartcase
set showmatch
set autoindent
set ruler
set vb
set viminfo+=n$VIM/_viminfo
set noerrorbells
set showcmd
set mouse=a
set history=1000
set undolevels=1000

" Setting tab size
set ts=4

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup    " do not keep a backup file, use versions instead
else
  set backup    " keep a backup file
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

"=================================================================
"=================== Setting Up temp file ========================
"=================================================================
" controls where backup files (with ~ extension by default) go.
set backupdir=$USERPROFILE/Vim/vimtmp

" The 'directory' option controls where swap files go.
set directory=$USERPROFILE/Vim/vimtmp

"=================================================================
"=================== Start keybinding ============================
"for learning vim I'm going to disable my arrows keys
"Hoppefully I will learno some time to program
"=================================================================
no   <down>    <Nop>
no   <left>    <Nop>
no   <right>   <Nop>
no   <up>      <Nop>

ino   <down>    <Nop>
ino   <left>    <Nop>
ino   <right>   <Nop>
ino   <up>      <Nop>

"=================================================================
"=================== Useful Keybindings ==========================
"=================================================================

"This unsets the "last search pattern" register by hitting return
nnoremap <CR><CR> :noh<CR><CR>

"remap to save file with ctr+s
"inoremap <C-s> <esc>:w<cr>a
"nnoremap <C-s> :w<cr>a

imap ii <Esc>

" maps work with plugin vim-unimpaired
" Bubble single lines
nmap <C-k> [e
nmap <C-j> ]e
" Bubble multiple line
vmap <C-k> [egv
vmap <C-j> ]egv

"Indent code between braces
"map <C-f> gq 

" Easier moving of code Blocks
" better indetation
vnoremap < <gv 
vnoremap > >gv

" Toggle spell checking on and off with `,s`
nmap <silent> <leader>s :set spell!<CR>
nmap <leader>p ]s
nmap <leader>o [s

"nmap <leader>"Map Bufplorer to be control by <ALT> pageUp and pageDown
" Buffers - explore/next/previous: 
nnoremap <leader>b   :BufExplorer<CR> 
nnoremap <leader><leader>n   :bn<CR>
nnoremap <leader><leader>m   :bp<CR>

" easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" resize split
"nnoremap <silent> <Leader>+ :exe "vertical resize " . (winheight(0) * 3/2)<CR>
"nnoremap <silent> <Leader>- :exe "vertical resize " . (winheight(0) * 2/3)<CR>

"=================================================================
"=================== NerdTree Settings ===========================
"=================================================================
"How can I open a NERDTree automatically when vim starts up?
"autocmd vimenter * NERDTree

"How can I open a NERDTree automatically when vim starts up if no files were specified?
"autocmd vimenter * if !argc() | NERDTree | endif

"How can I map a specific key or shortcut to open NERDTree?
"open NERDTree with Ctrl+n (you can set whatever key you want):
 map <leader>l :NERDTreeToggle<CR>

"How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

"=================================================================
"=================================================================
"=================== Plugins Keybindings ==========================
"=================================================================
"Adding mapping and the default command to invoke CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" snipmate trigger
 "ino <c-j> <c-r>=TriggerSnippet()<cr>
 "snor <c-j> <esc>i<right><c-r>=TriggerSnippet()<cr>

" Airline settings
"set laststatus=2

" Syntastic C checker 
"let g:loaded_syntastic_c_gcc_checker = 1 
"let g:loaded_syntastic_c_splint_checker = 1


" Vim Multicursors Plugin SetUp
" Out of the box, only the single key Ctrl-n is mapped in regular
" Vim's Normal mode and Visual mode to provide the functionality
" mentioned above. Ctrl-n, Ctrl-p, Ctrl-x, and <Esc> are mapped
" in the special multicursor mode once you've added at least one
" virtual cursor to the buffer. If you don't like the plugin taking
" over your favorite key bindings, you can turn off the default with

"let g:multi_cursor_use_default_mapping=0

"You can then map the 'next', 'previous', 'skip', and 'exit' keys like the following:

"Default mapping
"let g:multi_cursor_next_key='<c-m>'
"let g:multi_cursor_prev_key='<c-o>'
"let g:multi_cursor_skip_key='<c-i>'
"let g:multi_cursor_quit_key='<Esc>'

"By default, the 'next' key is also used to enter multicursor mode. If you
"want to use a different key to start multicursor mode than for selecting
"the next location, do like the following:
  
" Map start key separately from next key
"let g:multi_cursor_start_key='<F6>'


"Map Taglist to toggle the windows
"nnoremap <C-l>        :TlistToggle<CR>

" Arduino syntx highlight
"au BufRead,BufNewFile *.pde set filetype=arduino
"au BufRead,BufNewFile *.ino set filetype=arduino

" Snipmate keymap
"imap <C-f> <Plug>snipMateNextOrTrigger
"smap <C-f> <Plug>snipMateNextOrTrigger
  
"" YouCompleteMe
"let g:ycm_key_list_previous_completion=['<Up>']
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
